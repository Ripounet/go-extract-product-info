{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"E",
				"ExampleScrape_MetalSucks"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "package dashboard\n\nimport (\n		\"fmt\"\n        \"net/http\"\n\n		\"github.com/PuerkitoBio/goquery\"\n)\n\nfunc init() {\n        http.HandleFunc(\"/ws/*\", root)\n}\n\nfunc root(w http.ResponseWriter, r *http.Request) {\n	fetch()\n	fmt.Fprintf(w, \"hello\")\n}\n\nfunc fetch() {\n    // Load the HTML document (in real use, the type would be *goquery.Document)\n    var doc *goquery.Document\n    var e error\n\n    if doc, e = NewDocument(\"http://google.com\"); e != nil {\n        log.Fatal(e)\n    }\n\n    // Find the review items (the type of the Selection would be *goquery.Selection)\n    doc.Find(\"h1\").Each(func(i int, s *Selection) {\n        // For each item found, get the band and title\n        band := s.Text()\n        fmt.Printf(\"Review %d: - %s\\n\", i, band)\n    })\n    // To see the output of the Example while running the test suite (go test), simply\n    // remove the leading \"x\" before Output on the next line. This will cause the\n    // example to fail (all the \"real\" tests should pass).\n\n    // xOutput: voluntarily fail the Example output.\n}",
			"file": "/Users/adrian/Documents/Developper/go/apartamentos_dashboard/main.go",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 1027,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/adrian/Documents/Developper/go/apartamentos_dashboard/app.yaml",
			"settings":
			{
				"buffer_size": 276,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// guestbookKey returns the key used for all guestbook entries.\nfunc guestbookKey(c appengine.Context) *datastore.Key {\n        // The string \"default_guestbook\" here could be varied to have multiple guestbooks.\n        return datastore.NewKey(c, \"Guestbook\", \"default_guestbook\", 0, nil)\n}\n\n\nfunc root(w http.ResponseWriter, r *http.Request) {\n        c := appengine.NewContext(r)\n        // Ancestor queries, as shown here, are strongly consistent with the High\n        // Replication Datastore. Queries that span entity groups are eventually\n        // consistent. If we omitted the .Ancestor from this query there would be\n        // a slight chance that Greeting that had just been written would not\n        // show up in a query.\n        q := datastore.NewQuery(\"Greeting\").Ancestor(guestbookKey(c)).Order(\"-Date\").Limit(10)\n        greetings := make([]Greeting, 0, 10)\n        if _, err := q.GetAll(c, &greetings); err != nil {\n                http.Error(w, err.Error(), http.StatusInternalServerError)\n                return\n        }\n        if err := guestbookTemplate.Execute(w, greetings); err != nil {\n                http.Error(w, err.Error(), http.StatusInternalServerError)\n        }\n}\n\n\nvar guestbookTemplate = template.Must(template.New(\"book\").Parse(`\n<html>\n  <head>\n    <title>Go Guestbook</title>\n  </head>\n  <body>\n    {{range .}}\n      {{with .Author}}\n        <p><b>{{.}}</b> wrote:</p>\n      {{else}}\n        <p>An anonymous person wrote:</p>\n      {{end}}\n      <pre>{{.Content}}</pre>\n    {{end}}\n    <form action=\"/sign\" method=\"post\">\n      <div><textarea name=\"content\" rows=\"3\" cols=\"60\"></textarea></div>\n      <div><input type=\"submit\" value=\"Sign Guestbook\"></div>\n    </form>\n  </body>\n</html>\n`))\n\nfunc sign(w http.ResponseWriter, r *http.Request) {\n        c := appengine.NewContext(r)\n        g := Greeting{\n                Content: r.FormValue(\"content\"),\n                Date:    time.Now(),\n        }\n        if u := user.Current(c); u != nil {\n                g.Author = u.String()\n        }\n        // We set the same parent key on every Greeting entity to ensure each Greeting\n        // is in the same entity group. Queries across the single entity group\n        // will be consistent. However, the write rate to a single entity group\n        // should be limited to ~1/second.\n        key := datastore.NewIncompleteKey(c, \"Greeting\", guestbookKey(c))\n        _, err := datastore.Put(c, key, &g)\n        if err != nil {\n                http.Error(w, err.Error(), http.StatusInternalServerError)\n                return\n        }\n        http.Redirect(w, r, \"/\", http.StatusFound)\n}\n",
			"settings":
			{
				"buffer_size": 2627,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE html>\n<html>\n  <head>\n    <script src=\"build/react.js\"></script>\n    <script src=\"build/JSXTransformer.js\"></script>\n    <script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.js\"></script>\n  </head>\n  <body>\n    <div id=\"example\"></div>\n    <script type=\"text/jsx\">\n      /** @jsx React.DOM */\n\n      var test = React.createClass({\n      	 render: function() {\n      	 	$.get(\"\")\n\n		    return (\n		      <div className=\"comment\">\n		        <h2 className=\"commentAuthor\">\n		          {this.props.author}\n		        </h2>\n		        {this.props.children}\n		      </div>\n		    );\n		  }\n      });\n\n\n\n      React.renderComponent(\n        <h1>Hello, world!</h1>,\n        document.getElementById('example')\n      );\n    </script>\n  </body>\n</html>",
			"file": "/Users/adrian/Documents/Developper/go/apartamentos_dashboard/app/index.html",
			"file_size": 460,
			"file_write_time": 130452649690000000,
			"settings":
			{
				"buffer_size": 760,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 367.0,
		"selected_items":
		[
			[
				"fetch",
				"Fetch: Manage"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"html",
				"HTMLBeautify"
			],
			[
				"js",
				"Set Syntax: JSX"
			],
			[
				"shel",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"jsx",
				"Set Syntax: JSX"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 575.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/adrian/Documents/Developper/go/apartamentos_dashboard/admin.txt",
		"/Users/adrian/.zshrc",
		"/Users/adrian/Library/Application Support/Sublime Text 3/Packages/User/Fetch.sublime-settings",
		"/Users/adrian/Documents/Developper/go/apartamentos_dashboard/index.html",
		"/Users/adrian/Documents/Developper/workspace/AppartsDashboard/src/main/webapp/admin/js/app.js",
		"/Users/adrian/Documents/Developper/workspace/AppartsDashboard/src/main/webapp/admin/js/router.js",
		"/Users/adrian/Documents/Developper/workspace/AppartsDashboard/src/main/webapp/admin/js/views/projects/list.jsx",
		"/Users/adrian/Documents/Developper/workspace/AppartsDashboard/src/main/webapp/admin/js/views/projects/item.jsx",
		"/Users/adrian/Downloads/admin/js/main.js",
		"/Users/adrian/Downloads/admin/js/libs/react_backbone_mixin.js",
		"/Users/adrian/Downloads/admin/js/libs/react.js",
		"/Users/adrian/Downloads/admin/js/libs/backbone.js",
		"/Users/adrian/Downloads/admin/admin_ui.sublime-project",
		"/Users/adrian/Downloads/admin/js/libs/jquery.js",
		"/Users/adrian/Downloads/admin/js/libs/jsx.js"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"DOM"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/adrian/Documents/Developper/go/apartamentos_dashboard/main.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1027,
						"regions":
						{
						},
						"selection":
						[
							[
								35,
								35
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/adrian/Documents/Developper/go/apartamentos_dashboard/app.yaml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 276,
						"regions":
						{
						},
						"selection":
						[
							[
								194,
								194
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/YAML/YAML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2627,
						"regions":
						{
						},
						"selection":
						[
							[
								1328,
								1328
							]
						],
						"settings":
						{
							"syntax": "Packages/Go/Go.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 391.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/adrian/Documents/Developper/go/apartamentos_dashboard/app/index.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 760,
						"regions":
						{
						},
						"selection":
						[
							[
								74,
								74
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "dashboard.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"list",
				"js/views/projects/list.jsx"
			],
			[
				"item",
				"js/views/projects/item.jsx"
			],
			[
				"ite",
				"js/views/projects/item.js"
			],
			[
				"mai",
				"js/main.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
